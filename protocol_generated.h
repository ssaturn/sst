// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_PROTOCOL_PROTOCOL_H_
#define FLATBUFFERS_GENERATED_PROTOCOL_PROTOCOL_H_

#include "flatbuffers/flatbuffers.h"

namespace protocol {

enum error_code : int32_t {
  OK = 0,
  FAILED = 1
};

inline const error_code (&EnumValueserror_code())[2] {
  static const error_code values[] = {
    OK,
    FAILED
  };
  return values;
}

inline const char * const *EnumNameserror_code() {
  static const char * const names[3] = {
    "OK",
    "FAILED",
    nullptr
  };
  return names;
}

inline const char *EnumNameerror_code(error_code e) {
  if (flatbuffers::IsOutRange(e, OK, FAILED)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNameserror_code()[index];
}

enum id : int32_t {
  PING = 0,
  PONG = 1,
  ESTABLISH = 2,
  LOGIN_REQUEST = 2001,
  LOGIN_RESPONSE = 2002
};

inline const id (&EnumValuesid())[5] {
  static const id values[] = {
    PING,
    PONG,
    ESTABLISH,
    LOGIN_REQUEST,
    LOGIN_RESPONSE
  };
  return values;
}

inline const char *EnumNameid(id e) {
  switch (e) {
    case PING: return "PING";
    case PONG: return "PONG";
    case ESTABLISH: return "ESTABLISH";
    case LOGIN_REQUEST: return "LOGIN_REQUEST";
    case LOGIN_RESPONSE: return "LOGIN_RESPONSE";
    default: return "";
  }
}

}  // namespace protocol

#endif  // FLATBUFFERS_GENERATED_PROTOCOL_PROTOCOL_H_
