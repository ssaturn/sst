// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_PACKET_PACKET_H_
#define FLATBUFFERS_GENERATED_PACKET_PACKET_H_

#include "flatbuffers/flatbuffers.h"

namespace packet {

struct request_login;
struct request_loginBuilder;

struct response_login;
struct response_loginBuilder;

struct request_login FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef request_loginBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_USER_NO = 4,
    VT_USER_NAME = 6,
    VT_USER_PWD = 8
  };
  int32_t user_no() const {
    return GetField<int32_t>(VT_USER_NO, 0);
  }
  const flatbuffers::String *user_name() const {
    return GetPointer<const flatbuffers::String *>(VT_USER_NAME);
  }
  const flatbuffers::String *user_pwd() const {
    return GetPointer<const flatbuffers::String *>(VT_USER_PWD);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_USER_NO) &&
           VerifyOffsetRequired(verifier, VT_USER_NAME) &&
           verifier.VerifyString(user_name()) &&
           VerifyOffsetRequired(verifier, VT_USER_PWD) &&
           verifier.VerifyString(user_pwd()) &&
           verifier.EndTable();
  }
};

struct request_loginBuilder {
  typedef request_login Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_user_no(int32_t user_no) {
    fbb_.AddElement<int32_t>(request_login::VT_USER_NO, user_no, 0);
  }
  void add_user_name(flatbuffers::Offset<flatbuffers::String> user_name) {
    fbb_.AddOffset(request_login::VT_USER_NAME, user_name);
  }
  void add_user_pwd(flatbuffers::Offset<flatbuffers::String> user_pwd) {
    fbb_.AddOffset(request_login::VT_USER_PWD, user_pwd);
  }
  explicit request_loginBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<request_login> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<request_login>(end);
    fbb_.Required(o, request_login::VT_USER_NAME);
    fbb_.Required(o, request_login::VT_USER_PWD);
    return o;
  }
};

inline flatbuffers::Offset<request_login> Createrequest_login(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t user_no = 0,
    flatbuffers::Offset<flatbuffers::String> user_name = 0,
    flatbuffers::Offset<flatbuffers::String> user_pwd = 0) {
  request_loginBuilder builder_(_fbb);
  builder_.add_user_pwd(user_pwd);
  builder_.add_user_name(user_name);
  builder_.add_user_no(user_no);
  return builder_.Finish();
}

inline flatbuffers::Offset<request_login> Createrequest_loginDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t user_no = 0,
    const char *user_name = nullptr,
    const char *user_pwd = nullptr) {
  auto user_name__ = user_name ? _fbb.CreateString(user_name) : 0;
  auto user_pwd__ = user_pwd ? _fbb.CreateString(user_pwd) : 0;
  return packet::Createrequest_login(
      _fbb,
      user_no,
      user_name__,
      user_pwd__);
}

struct response_login FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef response_loginBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ERROR_CODE = 4
  };
  int32_t error_code() const {
    return GetField<int32_t>(VT_ERROR_CODE, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_ERROR_CODE) &&
           verifier.EndTable();
  }
};

struct response_loginBuilder {
  typedef response_login Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_error_code(int32_t error_code) {
    fbb_.AddElement<int32_t>(response_login::VT_ERROR_CODE, error_code, 0);
  }
  explicit response_loginBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<response_login> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<response_login>(end);
    return o;
  }
};

inline flatbuffers::Offset<response_login> Createresponse_login(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t error_code = 0) {
  response_loginBuilder builder_(_fbb);
  builder_.add_error_code(error_code);
  return builder_.Finish();
}

}  // namespace packet

#endif  // FLATBUFFERS_GENERATED_PACKET_PACKET_H_
